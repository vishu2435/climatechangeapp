{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport styles from \"./Tags.module.css\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nclass TagsInput extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      inputSize: 1,\n      inputValue: \"\",\n      tagsArray: []\n    });\n\n    _defineProperty(this, \"onDivClick\", ev => {\n      document.querySelector(\".\" + styles.tagsComponent + \">input\").focus();\n    });\n\n    _defineProperty(this, \"onInputChange\", event => {\n      event.persist();\n      let eve = event;\n      let value = eve.target.value;\n      let size = Math.max(1, value.length);\n      value = value[value.length - 1] === \",\" ? value.slice(0, value.length - 1) : value;\n\n      if (value.length < 80) {\n        this.setState({\n          inputSize: size > 30 ? 30 : size,\n          inputValue: value\n        });\n      } else {\n        alert(\"maxlength reached\");\n      }\n    });\n\n    _defineProperty(this, \"onKeyDown\", event => {\n      event.persist();\n\n      if ((event.key === \"Enter\" || event.key === \",\") && this.state.inputValue !== \"\") {\n        let array = this.state.tagsArray;\n        let value = this.state.inputValue;\n        let index = array.findIndex(i => {\n          return i.value === value;\n        });\n        console.log(\"index\", index);\n\n        if (index === -1) {\n          value = value.trim();\n          array.push({\n            id: this.tagId,\n            value\n          });\n          this.props.changeTagsArray(array);\n          this.setState({\n            inputSize: 1,\n            inputValue: \"\"\n          }, () => {\n            console.log(\"Set \", this.state);\n            this.tagId += 1;\n          });\n        }\n      } else if (this.state.inputValue === \"\" && this.state.inputSize === 1 && event.key === \"Backspace\") {\n        let array = this.state.tagsArray;\n        console.log(\"Inp backspace\");\n        array.pop();\n        this.props.changeTagsArray(array);\n      }\n    });\n\n    _defineProperty(this, \"deleteTag\", id => {\n      let array = this.state.tagsArray;\n      let index = array.findIndex(i => {\n        return i[\"id\"] === id;\n      });\n      array.splice(index, 1);\n      this.props.changeTagsArray(array);\n    });\n\n    this.tagId = 0;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      onClick: this.onDivClick,\n      className: styles.tagsComponent\n    }, this.props.tagsArray.map(i => __jsx(Button, {\n      key: i.id,\n      className: styles.button,\n      style: {\n        padding: 2,\n        backgroundColor: \"#ebebeb\",\n        borderRadius: 30,\n        marginRight: 8,\n        marginTop: 5,\n        height: '100%',\n        textTransform: 'lowercase',\n        fontSize: 12,\n        paddingTop: 2,\n        paddingBottom: 2\n      },\n      variant: \"outlined\"\n    }, i[\"value\"], __jsx(IconButton, {\n      onClick: () => this.deleteTag(i.id),\n      style: {\n        fontSize: 3,\n        marginLeft: 6,\n        padding: 2,\n        color: \"white\"\n      }\n    }, __jsx(CancelIcon, {\n      style: {\n        fontSize: 16,\n        color: \"rgb(0,0,0,0.87)\"\n      }\n    })))), __jsx(\"input\", {\n      onChange: this.onInputChange,\n      onKeyPress: this.onKeyPress,\n      onKeyDown: this.onKeyDown,\n      value: this.state.inputValue,\n      type: \"text\",\n      size: this.state.inputSize\n    }));\n  }\n\n}\n\nexport default TagsInput;","map":null,"metadata":{},"sourceType":"module"}